

ifeq ($(REALLY_INVOKE),)
$(error "Please invoke this file with 'make references' as this also restores your git revision.")
endif

.NOTPARALLEL:

UNIT_SOURCES=$(wildcard *.tex)

UNIT_PDF_REFERENCES=$(UNIT_SOURCES:%.tex=references/%.pdf)
UNIT_PNG_REFERENCES=$(UNIT_PDF_REFERENCES:%.pdf=%.png)

OLD_BRANCH_STORE=Makefile.oldbranch

$(info Generating $(OLD_BRANCH_STORE) (if it does not already exist))
$(shell if [ ! -f $(OLD_BRANCH_STORE) ]; then echo "#!/bin/sh" > $(OLD_BRANCH_STORE) && echo "git checkout `git branch | grep \* | cut -c 3-`" >>$(OLD_BRANCH_STORE) && echo "rm -f $(OLD_BRANCH_STORE)" >> $(OLD_BRANCH_STORE) && chmod 0755 $(OLD_BRANCH_STORE); fi)
$(info Type ./$(OLD_BRANCH_STORE) to restore old branch)
$(info Prepare: copying all sources to references/)
$(shell mkdir -p references; find . -maxdepth 1 \( -name '*.tex' -o -name '*.checkout' \) -execdir cp --link -n -t references/ {} +)

DEFAULT_REFERENCE_BRANCH=1.3.1

.SECONDARY: $(UNIT_PDF_REFERENCES)

all: $(UNIT_PNG_REFERENCES)

%.png: %.pdf
	convert $< $@

restore:
	if [ -f $(OLD_BRANCH_STORE) ]; then ./$(OLD_BRANCH_STORE); fi

clean:
	rm -rf references

references/%.pdf:
	@if [ -f $(@:.pdf=.checkout) ]; then \
		$(@:.pdf=.checkout); \
	else \
		git checkout $(DEFAULT_REFERENCE_BRANCH); \
	fi
	cd references && pdflatex -halt-on-error `basename $@`; CODE=$$?; cd ..; \
	echo "Type $(OLD_BRANCH_STORE) to restore original branch"; \
	rm -f $(@:.pdf=.tex); \
	exit $$CODE
